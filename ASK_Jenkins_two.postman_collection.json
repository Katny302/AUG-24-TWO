{
	"info": {
		"_postman_id": "91a979fc-0243-4d02-9518-6ee81825462a",
		"name": "ASK_Jenkins",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34481731"
	},
	"item": [
		{
			"name": "sign-in-[T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"teacherToken\",jsonData.token);",
							"pm.environment.set(\"teacherId\", jsonData.user.id);",
							"",
							"",
							"pm.test(\"Verify that the role is —TEACHER\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"TEACHER\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "content-type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"{{teacherEmail}}\",\n    \"password\":\"{{teacherPassword}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-in",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "quiz-[T]-Create a new quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"quizId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Demo Kate Sept 6\",\n  \"totalScore\": 18,\n  \"passingPercentage\": 75,\n  \"showStopperQuestion\": 1,\n  \"questions\": [\n    {\n      \"type\": \"TEXTUAL\",\n      \"question\": \"What is your name?\",\n      \"score\": 5\n    },\n    {\n      \"type\": \"SINGLE_CHOICE\",\n      \"question\": \"Which city is city largest in California?\",\n      \"score\": 7,\n      \"answer\": 2,\n      \"hasOtherOption\": false,\n      \"options\": [\n        \"San Francisco\",\n        \"Sacramento\",\n        \"Los Angeles\",\n        \"Redding\"\n      ]\n    },\n    {\n      \"type\": \"MULTIPLE_CHOICE\",\n      \"question\": \"Who was apple founded by?\",\n      \"score\": 6,\n      \"answers\": [\n        0,\n        1,\n        2\n      ],\n      \"hasOtherOption\": true,\n      \"options\": [\n        \"Steve Jobs\",\n        \"Steve Wozniak\",\n        \"Ronald Wayne\",\n        \"Ronald Reagan\"\n      ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/quiz",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quiz"
					]
				}
			},
			"response": []
		},
		{
			"name": "quiz - [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Put quiz - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that ApdatedAt is not null\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.updatedAt).to.not.eql (null);",
							"});",
							"",
							"",
							"pm.test(\"Verify that Id of updated quiz = quizId\", function () {",
							"",
							"    var jsonData = pm.response.json();",
							"    var quizUpdateId = pm.environment.get(\"quizId\");",
							"",
							"    pm.expect(jsonData.id).to.eql(quizUpdateId)",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Demo Kate Sept 6 Update\",\n  \"totalScore\": 18,\n  \"passingPercentage\": 75,\n  \"showStopperQuestion\": 1,\n  \"questions\": [\n    {\n      \"type\": \"TEXTUAL\",\n      \"question\": \"What is your name?\",\n      \"score\": 5\n    },\n    {\n      \"type\": \"SINGLE_CHOICE\",\n      \"question\": \"Which city is city largest in California?\",\n      \"score\": 7,\n      \"answer\": 2,\n      \"hasOtherOption\": false,\n      \"options\": [\n        \"San Francisco\",\n        \"Sacramento\",\n        \"Los Angeles\",\n        \"Redding\"\n      ]\n    },\n    {\n      \"type\": \"MULTIPLE_CHOICE\",\n      \"question\": \"Who was apple founded by?\",\n      \"score\": 6,\n      \"answers\": [\n        0,\n        1,\n        2\n      ],\n      \"hasOtherOption\": true,\n      \"options\": [\n        \"Steve Jobs\",\n        \"Steve Wozniak\",\n        \"Ronald Wayne\",\n        \"Ronald Reagan\"\n      ]\n    }\n  ],\n  \"id\":{{quizId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/quiz",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quiz"
					]
				}
			},
			"response": []
		},
		{
			"name": "quizzes - [T] - List of quizzes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"List of quizes - [T] - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var jsonData = pm.response.json();",
							"pm.test(\"Verify updatedAt is not null\", function () {",
							"    pm.expect(jsonData[jsonData.length-1].updatedAt).to.not.eql(null);",
							"});",
							"",
							"pm.test(\"Verify the last created quiz id and updates\", function () {",
							"var myQuiz = pm.environment.get(\"quizId\");",
							"pm.expect(jsonData[jsonData.length-1].id).to.eql(myQuiz);",
							"pm.expect(pm.response.text()).to.include(\"Update\");",
							"  ",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/quizzes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quizzes"
					]
				}
			},
			"response": []
		},
		{
			"name": "sign-in-[S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sign in after password change - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify user role - STUDENT\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"STUDENT\");",
							"});",
							"",
							"//setting variable to use in folowing codes:",
							" var jsonData = pm.response.json();",
							"",
							"//jsonData—is a name of variable",
							"pm.test(\"Verify student group - ABC\", function () {",
							"    pm.expect(jsonData.user.group).to.eql(\"ABC\");",
							"});",
							"",
							"//below we will use the var set above: var jsonData = pm.response.json():",
							"////jsonData—is a name of variable",
							"",
							"pm.environment.set(\"studentToken\", jsonData.token);",
							"",
							"pm.environment.set(\"studentId\", jsonData.user.id);",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "content-type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"{{studentOneEmail}}\",\n    \"password\":\"{{studentPassword}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-in",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "assignment-[T]-Create assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"assignmentId\", jsonData[0].id);",
							"pm.environment.set(\"assignmentGroupId\", jsonData[0].assignmentGroupID);",
							"",
							"",
							"",
							"pm.test(\"Verify status, result, and gradedBy values before submission\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].status).to.eql(\"ASSIGNED\");",
							"     pm.expect(jsonData[0].result).to.eql(\"PENDING\");",
							"      pm.expect(jsonData[0].gradedBy).to.eql(\"NONE\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"quizId\":{{quizId}},\n  \"userIds\":[{{studentId}}]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/assignment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "my-assignments-[S] -List of assignments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Asnts list for Student - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"     var jsonData = pm.response.json();",
							"",
							"    pm.test(\"The Id of the last Asnt [S] = last AsntId [T] assigned\", function () {",
							"    var AsntId = pm.environment.get(\"assignmentId\");",
							"    pm.expect(jsonData[jsonData.length-1].id).to.eql(AsntId)",
							"});",
							"",
							"pm.test(\"The status = Assigned\", function () {",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"ASSIGNED\")",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/my-assignments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my-assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "submit-assignment-[S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Submit Assignment - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Verify status,result and gradedBy after submission\", function () {",
							"    ",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"SUBMITTED\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\n{\n    \"assignmentId\": {{assignmentId}},\n    \"answers\": [\n        {\n            \"textAnswer\": \"answer\",\n            \"answer\": null\n        },\n        {\n            \"textAnswer\": \"\",\n            \"answer\": 2\n        },\n        {\n            \"textAnswer\": \"\",\n            \"answer\": [\n                2,\n                1,\n                0\n            ]\n        }\n    ]\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/submit-assignment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"submit-assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "assignment/:asntId-[T]-Grade Asnt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Grade Asnmt [T] - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Verify status,result and gradedBy after manual grading\", function () {",
							"",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");",
							"    pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");",
							"    pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"TEACHER\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"summary\": \"Summary from teacher\",\n  \"result\": \"PASSED\",\n  \"grades\": [\n    {\n      \"comment\": \"Very Goood\",\n      \"additionalScore\": 2\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/assignment/{{assignmentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignment",
						"{{assignmentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "my-grades-[S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"MY grades - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"  var jsonData = pm.response.json();",
							"",
							"pm.test(\"My Grades -status: Graded; gradedAt - not null\", function () {",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");",
							"    pm.expect(jsonData[jsonData.length-1].gradedAt).to.not.eql(null);",
							"});",
							"",
							"var AsntId = pm.environment.get(\"assignmentId\");",
							"pm.test(\"last graded Asnt ID in the list = assignmentId\", function () {",
							"   ",
							"    pm.expect(jsonData[jsonData.length-1].id).to.eql(AsntId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/my-grades",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my-grades"
					]
				}
			},
			"response": []
		},
		{
			"name": "quiz/:id - [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete quiz - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify the quiz was deleted\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Quiz was deleted\");",
							"    // pm.expect(jsonData.message).to.eql(\"Quiz does not exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/quiz/{{quizId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quiz",
						"{{quizId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assignment:assignmentGroupID-[T]-Delete Assignment Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete Asnt [T] - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify message after Asnt was deleted\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Assignment was deleted\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/assignment/{{assignmentGroupId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignment",
						"{{assignmentGroupId}}"
					]
				}
			},
			"response": []
		}
	]
}